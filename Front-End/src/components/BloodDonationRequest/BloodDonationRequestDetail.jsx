import React, { useEffect, useState } from "react";
import {
  Card,
  Button,
  Descriptions,
  Tag,
  message,
  Form,
  Input,
  Spin,
  Modal,
  Select, // Th√™m Select cho dropdown
  Row, // Th√™m Row v√† Col ƒë·ªÉ b·ªë c·ª•c form
  Col,
} from "antd";
import { useNavigate, useParams } from "react-router-dom";
import {
  getBloodRequestDetail,
  approveRequest,
  rejectRequest,
  completeRequest,
} from "../../services/bloodService";
import {
  CheckCircleOutlined,
  CloseCircleOutlined,
  SaveOutlined,
  EditOutlined,
  MedicineBoxOutlined,
} from "@ant-design/icons";

const { Option } = Select;

// Mapping status to color
const statusMap = {
  dangcho: { text: "ƒêang ch·ªù", color: "gold" },
  tuchoi: { text: "T·ª´ ch·ªëi", color: "red" },
  huy: { text: "H·ªßy", color: "gray" },
  xacnhan: { text: "X√°c nh·∫≠n", color: "blue" },
  dahien: { text: "ƒê√£ hi·∫øn", color: "green" },
};

export default function BloodRequestDetail() {
  const { id } = useParams();
  const navigate = useNavigate();
  const [loading, setLoading] = useState(false);
  const [requestDetail, setRequestDetail] = useState(null);
  const [note, setNote] = useState("");
  const [error, setError] = useState("");

  const [isExamModalVisible, setIsExamModalVisible] = useState(false);
  const [examData, setExamData] = useState(null);
  const [examForm] = Form.useForm();

  const fetchRequestDetail = async () => {
    setLoading(true);
    setExamData(null);
    try {
      const data = await getBloodRequestDetail(id);
      setRequestDetail(data);

      if (data.formKham) {
        try {
          const parsedExamData = JSON.parse(data.formKham);
          setExamData(parsedExamData);
        } catch (parseError) {
          console.error("L·ªói parse JSON t·ª´ formKham:", parseError);
          message.error("Kh√¥ng th·ªÉ ƒë·ªçc ƒë∆∞·ª£c d·ªØ li·ªáu kh√°m s·ª©c kh·ªèe.");
        }
      }
    } catch (e) {
      setError(
        e?.response?.data?.message ||
          "Kh√¥ng l·∫•y ƒë∆∞·ª£c th√¥ng tin y√™u c·∫ßu hi·∫øn m√°u!"
      );
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchRequestDetail();
  }, [id]);

  // ---- C√°c h√†m x·ª≠ l√Ω logic (kh√¥ng thay ƒë·ªïi) ----
  const handleApprove = async () => {
    if (!note) {
      message.error("B·∫°n c·∫ßn nh·∫≠p ghi ch√∫ khi duy·ªát y√™u c·∫ßu.");
      return;
    }
    setLoading(true);
    try {
      await approveRequest(id, { ghiChu: note });
      message.success("Y√™u c·∫ßu hi·∫øn m√°u ƒë√£ ƒë∆∞·ª£c duy·ªát!");
      fetchRequestDetail();
    } catch (e) {
      message.error(e?.response?.data?.message || "Duy·ªát y√™u c·∫ßu th·∫•t b·∫°i!");
    } finally {
      setLoading(false);
    }
  };

  const handleInitialReject = async () => {
    if (!note) {
      message.error("B·∫°n c·∫ßn nh·∫≠p ghi ch√∫ khi t·ª´ ch·ªëi y√™u c·∫ßu.");
      return;
    }
    setLoading(true);
    try {
      await rejectRequest(id, { ghiChu: note });
      message.success("Y√™u c·∫ßu hi·∫øn m√°u ƒë√£ b·ªã t·ª´ ch·ªëi!");
      fetchRequestDetail();
    } catch (e) {
      message.error(e?.response?.data?.message || "T·ª´ ch·ªëi y√™u c·∫ßu th·∫•t b·∫°i!");
    } finally {
      setLoading(false);
    }
  };

  const showExamModal = () => {
    if (examData) {
      examForm.setFieldsValue(examData);
    } else {
      examForm.resetFields();
    }
    setIsExamModalVisible(true);
  };

  const handleFinishExam = (values) => {
    setExamData(values);
    setIsExamModalVisible(false);
    message.success("ƒê√£ l∆∞u k·∫øt qu·∫£ kh√°m!");
  };

  const handleCompleteAfterExam = async () => {
    if (!note) {
      message.error("B·∫°n c·∫ßn nh·∫≠p v·ªã tr√≠ l∆∞u tr·ªØ v√†o √¥ ghi ch√∫.");
      return;
    }
    if (!examData) {
      message.error("Kh√¥ng c√≥ d·ªØ li·ªáu kh√°m s·ª©c kh·ªèe.");
      return;
    }
    setLoading(true);
    try {
      await completeRequest(id, {
        viTriLuuTru: note,
        formKham: JSON.stringify(examData),
      });
      message.success("Y√™u c·∫ßu hi·∫øn m√°u ƒë√£ ho√†n th√†nh!");
      fetchRequestDetail();
    } catch (e) {
      message.error(
        e?.response?.data?.message || "Ho√†n th√†nh y√™u c·∫ßu th·∫•t b·∫°i!"
      );
    } finally {
      setLoading(false);
    }
  };

  const handleRejectAfterExam = async () => {
    if (!note) {
      message.error("B·∫°n c·∫ßn nh·∫≠p l√Ω do t·ª´ ch·ªëi v√†o √¥ ghi ch√∫.");
      return;
    }
    if (!examData) {
      message.error("Kh√¥ng c√≥ d·ªØ li·ªáu kh√°m s·ª©c kh·ªèe.");
      return;
    }
    setLoading(true);
    try {
      await rejectRequest(id, {
        ghiChu: note,
        formKham: JSON.stringify(examData),
      });
      message.success("Y√™u c·∫ßu hi·∫øn m√°u ƒë√£ b·ªã t·ª´ ch·ªëi!");
      fetchRequestDetail();
    } catch (e) {
      message.error(e?.response?.data?.message || "T·ª´ ch·ªëi y√™u c·∫ßu th·∫•t b·∫°i!");
    } finally {
      setLoading(false);
    }
  };

  // ---- C√°c h√†m render (c·∫≠p nh·∫≠t hi·ªÉn th·ªã) ----
  if (loading)
    return (
      <Spin size="large" style={{ display: "block", margin: "50px auto" }} />
    );

  if (error)
    return (
      <Card title="L·ªói" style={{ marginTop: 50, textAlign: "center" }}>
        <h3>{error}</h3>
      </Card>
    );

  const renderActionButtons = () => {
    const trangThai = requestDetail?.trangThai;
    if (trangThai === "dangcho") {
      return (
        <>
          <Button
            type="primary"
            icon={<CheckCircleOutlined />}
            onClick={handleApprove}
            style={{ marginRight: 8, backgroundColor: "#4CAF50" }}
          >
            Duy·ªát
          </Button>
          <Button
            danger
            type="primary"
            icon={<CloseCircleOutlined />}
            onClick={handleInitialReject}
          >
            T·ª´ ch·ªëi
          </Button>
        </>
      );
    }
    if (trangThai === "xacnhan") {
      if (!examData) {
        return (
          <Button
            type="primary"
            icon={<MedicineBoxOutlined />}
            onClick={showExamModal}
          >
            Nh·∫≠p th√¥ng tin kh√°m
          </Button>
        );
      }
      return (
        <>
          <Button
            icon={<EditOutlined />}
            onClick={showExamModal}
            style={{ marginRight: 8 }}
          >
            Ch·ªânh s·ª≠a k·∫øt qu·∫£
          </Button>
          <Button
            danger
            type="primary"
            icon={<CloseCircleOutlined />}
            onClick={handleRejectAfterExam}
            style={{ marginRight: 8 }}
          >
            T·ª´ ch·ªëi
          </Button>
          <Button
            type="primary"
            icon={<SaveOutlined />}
            onClick={handleCompleteAfterExam}
            style={{ backgroundColor: "#2196F3" }}
          >
            Ho√†n th√†nh
          </Button>
        </>
      );
    }
    return null;
  };

  return (
    <>
      <Card
        title={
          <span style={{ fontWeight: 700, fontSize: 20, color: "#3f51b5" }}>
            ü©∏ Chi ti·∫øt y√™u c·∫ßu hi·∫øn m√°u
          </span>
        }
        extra={
          <Button onClick={() => navigate("/employee/blood-donation-request")}>
            Quay l·∫°i
          </Button>
        }
      >
        <Descriptions
          bordered
          size="middle"
          style={{ backgroundColor: "white", borderRadius: 10 }}
          column={3}
        >
          {/* Th√¥ng tin ng∆∞·ªùi hi·∫øn v√† y√™u c·∫ßu (kh√¥ng ƒë·ªïi) */}
          <Descriptions.Item label="T√™n ng∆∞·ªùi hi·∫øn">
            {requestDetail?.nguoiHien.ten}
          </Descriptions.Item>
          <Descriptions.Item label="Email">
            {requestDetail?.nguoiHien.email}
          </Descriptions.Item>
          <Descriptions.Item label="S·ªë ƒëi·ªán tho·∫°i">
            {requestDetail?.nguoiHien.soDienThoai}
          </Descriptions.Item>
          <Descriptions.Item label="Ng√†y sinh">
            {requestDetail?.nguoiHien.ngaySinh
              ? new Date(requestDetail.nguoiHien.ngaySinh).toLocaleDateString(
                  "vi-VN"
                )
              : "-"}
          </Descriptions.Item>
          <Descriptions.Item label="Gi·ªõi t√≠nh">
            {requestDetail?.nguoiHien.gioiTinh === "nam"
              ? "Nam"
              : requestDetail?.nguoiHien.gioiTinh === "nu"
              ? "N·ªØ"
              : requestDetail?.nguoiHien.gioiTinh}
          </Descriptions.Item>
          <Descriptions.Item label="ƒê·ªãa ch·ªâ">
            {requestDetail?.nguoiHien.diaChi}
          </Descriptions.Item>
          <Descriptions.Item label="Nh√≥m m√°u">
            {requestDetail?.nguoiHien.nhomMau?.ten}
          </Descriptions.Item>
          <Descriptions.Item label="Rh">
            {requestDetail?.nguoiHien.yeuToRh}
          </Descriptions.Item>
          <Descriptions.Item label="Chi·ªÅu cao (cm)">
            {requestDetail?.nguoiHien.chieuCao}
          </Descriptions.Item>
          <Descriptions.Item label="C√¢n n·∫∑ng (kg)">
            {requestDetail?.nguoiHien.canNang}
          </Descriptions.Item>
          <Descriptions.Item label="Ti·ªÅn s·ª≠ b·ªánh">
            {requestDetail?.nguoiHien.tienSuBenh}
          </Descriptions.Item>
          <Descriptions.Item label="Tr·∫°ng th√°i">
            <Tag color={statusMap[requestDetail?.trangThai]?.color}>
              {statusMap[requestDetail?.trangThai]?.text || "Kh√¥ng r√µ"}
            </Tag>
          </Descriptions.Item>
          <Descriptions.Item label="Ng√†y y√™u c·∫ßu">
            {new Date(requestDetail?.ngayTao).toLocaleString("vi-VN")}
          </Descriptions.Item>
          <Descriptions.Item label="Ng√†y hi·∫øn m√°u d·ª± ki·∫øn">
            {new Date(requestDetail?.ngayHienMauDuKien).toLocaleString("vi-VN")}
          </Descriptions.Item>
          <Descriptions.Item label="S·ªë l∆∞·ª£ng m√°u">
            {requestDetail?.soLuong} ml
          </Descriptions.Item>
          <Descriptions.Item label="Ghi ch√∫">
            {requestDetail?.ghiChu}
          </Descriptions.Item>
          <Descriptions.Item label="Lo·∫°i hi·∫øn">
            {requestDetail?.loaiHien}
          </Descriptions.Item>
          {requestDetail?.nguoiDuyet && (
            <Descriptions.Item label="Ng∆∞·ªùi duy·ªát">
              {requestDetail?.nguoiDuyet.ten}
            </Descriptions.Item>
          )}
        </Descriptions>

        {/* C·∫¨P NH·∫¨T: Hi·ªÉn th·ªã chi ti·∫øt k·∫øt qu·∫£ kh√°m */}
        {examData && (
          <Descriptions
            title={
              <span style={{ color: "#3f51b5", fontWeight: "bold" }}>
                K·∫øt qu·∫£ kh√°m s√†ng l·ªçc
              </span>
            }
            bordered
            size="middle"
            style={{
              marginTop: 24,
              backgroundColor: "#f0f5ff",
              borderRadius: 10,
              padding: 16,
            }}
            column={2}
          >
            <Descriptions.Item label="Chi·ªÅu cao (cm)">
              {examData.chieuCao}
            </Descriptions.Item>
            <Descriptions.Item label="C√¢n n·∫∑ng (kg)">
              {examData.canNang}
            </Descriptions.Item>
            <Descriptions.Item label="Huy·∫øt √°p (mmHg)">
              {examData.huyetAp}
            </Descriptions.Item>
            <Descriptions.Item label="Nhi·ªát ƒë·ªô (¬∞C)">
              {examData.nhietDo}
            </Descriptions.Item>
            <Descriptions.Item label="S·ª≠ d·ª•ng ch·∫•t k√≠ch th√≠ch">
              {examData.suDungChatKichThich}
            </Descriptions.Item>
            <Descriptions.Item label="ƒêang d√πng thu·ªëc">
              {examData.dangDungThuoc}
            </Descriptions.Item>
            <Descriptions.Item label="T√¨nh tr·∫°ng huy·∫øt s·∫Øc t·ªë" span={2}>
              <Tag
                color={
                  examData.kiemTraHuyetSacTo === "ƒê·ªß" ? "success" : "warning"
                }
              >
                {examData.kiemTraHuyetSacTo}
              </Tag>
            </Descriptions.Item>
            <Descriptions.Item label="C√°c b·ªánh m·∫°n t√≠nh" span={2}>
              {examData.benhManTinh || "(Kh√¥ng c√≥)"}
            </Descriptions.Item>
            <Descriptions.Item label="Nguy c∆° l√¢y nhi·ªÖm qua ƒë∆∞·ªùng m√°u" span={2}>
              {examData.nguyCoLayNhiem || "(Kh√¥ng c√≥)"}
            </Descriptions.Item>
            <Descriptions.Item label="K·∫øt lu·∫≠n/Ghi ch√∫ th√™m" span={2}>
              {examData.ketLuan || "(Kh√¥ng c√≥)"}
            </Descriptions.Item>
          </Descriptions>
        )}

        <Form layout="vertical" style={{ marginTop: 24 }}>
          <Form.Item label="Ghi ch√∫ / L√Ω do / V·ªã tr√≠ l∆∞u tr·ªØ" name="ghiChu">
            <Input.TextArea
              value={note}
              onChange={(e) => setNote(e.target.value)}
              placeholder="Nh·∫≠p ghi ch√∫ cho h√†nh ƒë·ªông t∆∞∆°ng ·ª©ng..."
              rows={4}
            />
          </Form.Item>
          <div style={{ textAlign: "right", marginTop: 24 }}>
            {renderActionButtons()}
          </div>
        </Form>
      </Card>

      {/* C·∫¨P NH·∫¨T: Form chi ti·∫øt trong Modal */}
      <Modal
        title="Phi·∫øu kh√°m s√†ng l·ªçc s·ª©c kh·ªèe"
        open={isExamModalVisible}
        onCancel={() => setIsExamModalVisible(false)}
        footer={null}
        destroyOnClose
        width={800} // TƒÉng chi·ªÅu r·ªông modal
      >
        <Form
          form={examForm}
          layout="vertical"
          onFinish={handleFinishExam}
          initialValues={{
            benhManTinh: "",
            nguyCoLayNhiem: "",
            suDungChatKichThich: "Kh√¥ng",
            dangDungThuoc: "Kh√¥ng",
            huyetAp: "",
            nhietDo: "",
            canNang: "",
            chieuCao: "",
            kiemTraHuyetSacTo: "ƒê·ªß",
            ketLuan: "",
          }}
        >
          <Row gutter={24}>
            <Col span={12}>
              <Form.Item
                name="chieuCao"
                label="Chi·ªÅu cao (cm)"
                rules={[
                  { required: true, message: "Vui l√≤ng nh·∫≠p chi·ªÅu cao!" },
                ]}
              >
                <Input type="number" placeholder="V√≠ d·ª•: 170" />
              </Form.Item>
            </Col>
            <Col span={12}>
              <Form.Item
                name="canNang"
                label="C√¢n n·∫∑ng (kg)"
                rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p c√¢n n·∫∑ng!" }]}
              >
                <Input type="number" placeholder="V√≠ d·ª•: 65" />
              </Form.Item>
            </Col>
            <Col span={12}>
              <Form.Item
                name="huyetAp"
                label="ƒêo huy·∫øt √°p (mmHg)"
                rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p huy·∫øt √°p!" }]}
              >
                <Input placeholder="V√≠ d·ª•: 120/80" />
              </Form.Item>
            </Col>
            <Col span={12}>
              <Form.Item
                name="nhietDo"
                label="Nhi·ªát ƒë·ªô (¬∞C)"
                rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p nhi·ªát ƒë·ªô!" }]}
              >
                <Input type="number" step="0.1" placeholder="V√≠ d·ª•: 36.8" />
              </Form.Item>
            </Col>
            <Col span={12}>
              <Form.Item
                name="suDungChatKichThich"
                label="Vi·ªác s·ª≠ d·ª•ng ch·∫•t k√≠ch th√≠ch, r∆∞·ª£u, bia, thu·ªëc l√°"
                rules={[{ required: true }]}
              >
                <Select>
                  <Option value="Kh√¥ng">Kh√¥ng</Option>
                  <Option value="Th·ªânh tho·∫£ng">Th·ªânh tho·∫£ng</Option>
                  <Option value="Th∆∞·ªùng xuy√™n">Th∆∞·ªùng xuy√™n</Option>
                </Select>
              </Form.Item>
            </Col>
            <Col span={12}>
              <Form.Item
                name="dangDungThuoc"
                label="ƒêang d√πng thu·ªëc"
                rules={[{ required: true }]}
              >
                <Select>
                  <Option value="Kh√¥ng">Kh√¥ng</Option>
                  <Option value="Kh√°ng sinh">Kh√°ng sinh</Option>
                  <Option value="Aspirin">Aspirin</Option>
                  <Option value="Thu·ªëc ƒëi·ªÅu tr·ªã m·∫°n t√≠nh">
                    Thu·ªëc ƒëi·ªÅu tr·ªã m·∫°n t√≠nh
                  </Option>
                </Select>
              </Form.Item>
            </Col>
            <Col span={24}>
              <Form.Item
                name="kiemTraHuyetSacTo"
                label="Ki·ªÉm tra huy·∫øt s·∫Øc t·ªë ƒë·ªÉ ƒë√°nh gi√° thi·∫øu m√°u"
                rules={[{ required: true }]}
              >
                <Select>
                  <Option value="ƒê·ªß">ƒê·ªß ƒëi·ªÅu ki·ªán</Option>
                  <Option value="Kh√¥ng ƒë·ªß">Kh√¥ng ƒë·ªß ƒëi·ªÅu ki·ªán</Option>
                </Select>
              </Form.Item>
            </Col>
            <Col span={24}>
              <Form.Item
                name="benhManTinh"
                label="C√°c b·ªánh m·∫°n t√≠nh (tim m·∫°ch, huy·∫øt √°p, ti·ªÉu ƒë∆∞·ªùng, d·∫° d√†y, h√¥ h·∫•p, gan, th·∫≠n...)"
              >
                <Input.TextArea
                  rows={3}
                  placeholder="Li·ªát k√™ c√°c b·ªánh m·∫°n t√≠nh n·∫øu c√≥"
                />
              </Form.Item>
            </Col>
            <Col span={24}>
              <Form.Item
                name="nguyCoLayNhiem"
                label="Nguy c∆° l√¢y nhi·ªÖm qua ƒë∆∞·ªùng m√°u (quan h·ªá kh√¥ng an to√†n, xƒÉm h√¨nh/ch√¢m c·ª©u g·∫ßn ƒë√¢y...)"
              >
                <Input.TextArea
                  rows={3}
                  placeholder="Li·ªát k√™ c√°c h√†nh vi nguy c∆° n·∫øu c√≥"
                />
              </Form.Item>
            </Col>
            <Col span={24}>
              <Form.Item
                name="ketLuan"
                label="K·∫øt lu·∫≠n/Ghi ch√∫ th√™m c·ªßa nh√¢n vi√™n y t·∫ø"
              >
                <Input.TextArea
                  rows={3}
                  placeholder="Ghi ch√∫ th√™m v·ªÅ t√¨nh tr·∫°ng s·ª©c kh·ªèe c·ªßa ng∆∞·ªùi hi·∫øn"
                />
              </Form.Item>
            </Col>
          </Row>

          <Form.Item style={{ textAlign: "right", marginTop: 16 }}>
            <Button
              onClick={() => setIsExamModalVisible(false)}
              style={{ marginRight: 8 }}
            >
              H·ªßy
            </Button>
            <Button type="primary" htmlType="submit">
              L∆∞u k·∫øt qu·∫£
            </Button>
          </Form.Item>
        </Form>
      </Modal>
    </>
  );
}
