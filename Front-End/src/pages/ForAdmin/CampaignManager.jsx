import React, { useState, useEffect } from 'react';
import {
  Table,
  Button,
  Space,
  Modal,
  Form,
  Input,
  DatePicker,
  InputNumber,
  Select,
  message,
  Popconfirm,
  Tag,
  Card,
  Row,
  Col,
  Statistic,
  Spin,
  Alert
} from 'antd';
import {
  PlusOutlined,
  EditOutlined,
  DeleteOutlined,
  EyeOutlined,
  SearchOutlined,
  ReloadOutlined
} from '@ant-design/icons';
import { getAllCampaigns, createCampaign, updateCampaign, deleteCampaign } from '../../services/api/campaignService';
import { safeFormatDateVietnamese } from '../../utils/dateUtils';
import dayjs from 'dayjs';

const { TextArea } = Input;
const { Option } = Select;

export default function CampaignManager() {
  const [campaigns, setCampaigns] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [modalVisible, setModalVisible] = useState(false);
  const [editingCampaign, setEditingCampaign] = useState(null);
  const [form] = Form.useForm();
  const [currentPage, setCurrentPage] = useState(1);
  const [total, setTotal] = useState(0);
  const [searchKeyword, setSearchKeyword] = useState('');
  const [statusFilter, setStatusFilter] = useState('');

  const fetchCampaigns = async (page = 1) => {
    setLoading(true);
    setError(null);
    try {
      const res = await getAllCampaigns(page, statusFilter, searchKeyword);
      setCampaigns(res.content || []);
      setCurrentPage(res.number + 1);
      setTotal(res.totalElements);
    } catch (error) {
      console.error('Error fetching campaigns:', error);
      
      // Hi·ªÉn th·ªã th√¥ng b√°o l·ªói c·ª• th·ªÉ h∆°n
      let errorMessage = 'Kh√¥ng th·ªÉ t·∫£i danh s√°ch ho·∫°t ƒë·ªông hi·∫øn m√°u';
      
      if (error.code === 'ERR_NETWORK' || error.message.includes('CORS')) {
        errorMessage = 'L·ªói k·∫øt n·ªëi: Backend server kh√¥ng kh·∫£ d·ª•ng ho·∫∑c CORS ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh. Vui l√≤ng ki·ªÉm tra backend server v√† c·∫•u h√¨nh CORS.';
      } else if (error.response?.status === 404) {
        errorMessage = 'API endpoint kh√¥ng t√¨m th·∫•y. Vui l√≤ng ki·ªÉm tra backend controller.';
      } else if (error.response?.status === 500) {
        errorMessage = 'L·ªói server. Vui l√≤ng ki·ªÉm tra backend logs.';
      }
      
      setError(errorMessage);
      message.error(errorMessage);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchCampaigns();
  }, [statusFilter, searchKeyword]);

  const handleCreate = () => {
    setEditingCampaign(null);
    form.resetFields();
    setModalVisible(true);
  };

  const handleEdit = (record) => {
    setEditingCampaign(record);
    form.setFieldsValue({
      ten: record.ten,
      diaDiem: record.diaDiem,
      moTa: record.moTa,
      soLuongNguoiToiDa: record.soLuongNguoiToiDa,
      ngayBatDau: dayjs(record.ngayBatDau),
      ngayKetThuc: dayjs(record.ngayKetThuc),
    });
    setModalVisible(true);
  };

  const handleDelete = async (id) => {
    try {
      await deleteCampaign(id);
      message.success('X√≥a ho·∫°t ƒë·ªông hi·∫øn m√°u th√†nh c√¥ng');
      fetchCampaigns(currentPage);
    } catch (error) {
      console.error('Error deleting campaign:', error);
      message.error('Kh√¥ng th·ªÉ x√≥a ho·∫°t ƒë·ªông hi·∫øn m√°u');
    }
  };

  const handleSubmit = async (values) => {
    try {
      const data = {
        ...values,
        ngayBatDau: values.ngayBatDau.format('YYYY-MM-DD'),
        ngayKetThuc: values.ngayKetThuc.format('YYYY-MM-DD'),
      };

      if (editingCampaign) {
        await updateCampaign(editingCampaign.id, data);
        message.success('C·∫≠p nh·∫≠t ho·∫°t ƒë·ªông hi·∫øn m√°u th√†nh c√¥ng');
      } else {
        await createCampaign(data);
        message.success('T·∫°o ho·∫°t ƒë·ªông hi·∫øn m√°u th√†nh c√¥ng');
      }

      setModalVisible(false);
      fetchCampaigns(currentPage);
    } catch (error) {
      console.error('Error saving campaign:', error);
      message.error('Kh√¥ng th·ªÉ l∆∞u ho·∫°t ƒë·ªông hi·∫øn m√°u');
    }
  };

  const getStatusTag = (status) => {
    const statusMap = {
      'sapdienra': { color: 'blue', text: 'S·∫Øp di·ªÖn ra' },
      'dangdienra': { color: 'green', text: 'ƒêang di·ªÖn ra' },
      'daketthuc': { color: 'red', text: 'ƒê√£ k·∫øt th√∫c' },
      'dahuy': { color: 'orange', text: 'ƒê√£ h·ªßy' }
    };
    const statusInfo = statusMap[status] || { color: 'default', text: status };
    return <Tag color={statusInfo.color}>{statusInfo.text}</Tag>;
  };

  const columns = [
    {
      title: 'T√™n ho·∫°t ƒë·ªông',
      dataIndex: 'ten',
      key: 'ten',
      width: 200,
      ellipsis: true,
    },
    {
      title: 'ƒê·ªãa ƒëi·ªÉm',
      dataIndex: 'diaDiem',
      key: 'diaDiem',
      width: 150,
      ellipsis: true,
    },
    {
      title: 'Ng√†y b·∫Øt ƒë·∫ßu',
      dataIndex: 'ngayBatDau',
      key: 'ngayBatDau',
      width: 120,
      render: (date) => safeFormatDateVietnamese(date),
    },
    {
      title: 'Ng√†y k·∫øt th√∫c',
      dataIndex: 'ngayKetThuc',
      key: 'ngayKetThuc',
      width: 120,
      render: (date) => safeFormatDateVietnamese(date),
    },
    {
      title: 'S·ªë l∆∞·ª£ng',
      key: 'soLuong',
      width: 120,
      render: (_, record) => (
        <span>
          {record.soLuongNguoiDangKyHienTai || 0}/{record.soLuongNguoiToiDa}
        </span>
      ),
    },
    {
      title: 'Tr·∫°ng th√°i',
      dataIndex: 'trangThaiHoatDong',
      key: 'trangThaiHoatDong',
      width: 120,
      render: (status) => getStatusTag(status),
    },
    {
      title: 'Thao t√°c',
      key: 'actions',
      width: 150,
      render: (_, record) => (
        <Space size="small">
          <Button
            type="link"
            icon={<EyeOutlined />}
            onClick={() => handleEdit(record)}
            title="Xem chi ti·∫øt"
          />
          <Button
            type="link"
            icon={<EditOutlined />}
            onClick={() => handleEdit(record)}
            title="Ch·ªânh s·ª≠a"
          />
          <Popconfirm
            title="B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a?"
            onConfirm={() => handleDelete(record.id)}
            okText="C√≥"
            cancelText="Kh√¥ng"
          >
            <Button
              type="link"
              danger
              icon={<DeleteOutlined />}
              title="X√≥a"
            />
          </Popconfirm>
        </Space>
      ),
    },
  ];

  const stats = {
    total: campaigns.length,
    upcoming: campaigns.filter(c => c.trangThaiHoatDong === 'sapdienra').length,
    ongoing: campaigns.filter(c => c.trangThaiHoatDong === 'dangdienra').length,
    completed: campaigns.filter(c => c.trangThaiHoatDong === 'daketthuc').length,
  };

  if (error) {
    return (
      <div style={{ padding: '24px' }}>
        <Alert
          message="L·ªói k·∫øt n·ªëi Backend"
          description={
            <div>
              <p>{error}</p>
              <div style={{ marginTop: '16px' }}>
                <h4>üîß H∆∞·ªõng d·∫´n kh·∫Øc ph·ª•c:</h4>
                <ol style={{ marginLeft: '20px' }}>
                  <li>ƒê·∫£m b·∫£o backend server ƒëang ch·∫°y tr√™n port 8080</li>
                  <li>Ki·ªÉm tra c·∫•u h√¨nh CORS trong backend</li>
                  <li>Restart backend server sau khi thay ƒë·ªïi c·∫•u h√¨nh</li>
                  <li>Ki·ªÉm tra database connection</li>
                </ol>
                <p style={{ marginTop: '12px', fontSize: '12px', color: '#666' }}>
                  üí° Xem file <code>CORS_FIX_GUIDE.md</code> ƒë·ªÉ c√≥ h∆∞·ªõng d·∫´n chi ti·∫øt
                </p>
              </div>
            </div>
          }
          type="error"
          showIcon
          action={
            <Button size="small" danger onClick={() => fetchCampaigns()}>
              Th·ª≠ l·∫°i
            </Button>
          }
        />
      </div>
    );
  }

  return (
    <div style={{ padding: '24px' }}>
      <div style={{ marginBottom: '24px' }}>
        <h2>Qu·∫£n l√Ω ho·∫°t ƒë·ªông hi·∫øn m√°u</h2>
      </div>

      {/* Statistics */}
      <Row gutter={16} style={{ marginBottom: '24px' }}>
        <Col span={6}>
          <Card>
            <Statistic
              title="T·ªïng s·ªë ho·∫°t ƒë·ªông"
              value={stats.total}
              valueStyle={{ color: '#3f8600' }}
            />
          </Card>
        </Col>
        <Col span={6}>
          <Card>
            <Statistic
              title="S·∫Øp di·ªÖn ra"
              value={stats.upcoming}
              valueStyle={{ color: '#1890ff' }}
            />
          </Card>
        </Col>
        <Col span={6}>
          <Card>
            <Statistic
              title="ƒêang di·ªÖn ra"
              value={stats.ongoing}
              valueStyle={{ color: '#52c41a' }}
            />
          </Card>
        </Col>
        <Col span={6}>
          <Card>
            <Statistic
              title="ƒê√£ k·∫øt th√∫c"
              value={stats.completed}
              valueStyle={{ color: '#cf1322' }}
            />
          </Card>
        </Col>
      </Row>

      {/* Filters and Actions */}
      <Card style={{ marginBottom: '24px' }}>
        <Row gutter={16} align="middle">
          <Col span={6}>
            <Input
              placeholder="T√¨m ki·∫øm theo t√™n..."
              prefix={<SearchOutlined />}
              value={searchKeyword}
              onChange={(e) => setSearchKeyword(e.target.value)}
              onPressEnter={() => fetchCampaigns(1)}
            />
          </Col>
          <Col span={4}>
            <Select
              placeholder="Tr·∫°ng th√°i"
              value={statusFilter}
              onChange={setStatusFilter}
              allowClear
              style={{ width: '100%' }}
            >
              <Option value="sapdienra">S·∫Øp di·ªÖn ra</Option>
              <Option value="dangdienra">ƒêang di·ªÖn ra</Option>
              <Option value="daketthuc">ƒê√£ k·∫øt th√∫c</Option>
              <Option value="dahuy">ƒê√£ h·ªßy</Option>
            </Select>
          </Col>
          <Col span={4}>
            <Button
              type="primary"
              icon={<PlusOutlined />}
              onClick={handleCreate}
            >
              Th√™m m·ªõi
            </Button>
          </Col>
          <Col span={4}>
            <Button
              icon={<ReloadOutlined />}
              onClick={() => fetchCampaigns(currentPage)}
            >
              L√†m m·ªõi
            </Button>
          </Col>
        </Row>
      </Card>

      {/* Table */}
      <Card>
        <Table
          columns={columns}
          dataSource={campaigns}
          rowKey="id"
          loading={loading}
          pagination={{
            current: currentPage,
            total: total,
            pageSize: 20,
            showSizeChanger: false,
            onChange: (page) => {
              setCurrentPage(page);
              fetchCampaigns(page);
            },
          }}
          scroll={{ x: 1000 }}
        />
      </Card>

      {/* Modal */}
      <Modal
        title={editingCampaign ? 'Ch·ªânh s·ª≠a ho·∫°t ƒë·ªông hi·∫øn m√°u' : 'Th√™m ho·∫°t ƒë·ªông hi·∫øn m√°u m·ªõi'}
        open={modalVisible}
        onCancel={() => setModalVisible(false)}
        footer={null}
        width={600}
      >
        <Form
          form={form}
          layout="vertical"
          onFinish={handleSubmit}
        >
          <Form.Item
            name="ten"
            label="T√™n ho·∫°t ƒë·ªông"
            rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p t√™n ho·∫°t ƒë·ªông' }]}
          >
            <Input placeholder="Nh·∫≠p t√™n ho·∫°t ƒë·ªông hi·∫øn m√°u" />
          </Form.Item>

          <Form.Item
            name="diaDiem"
            label="ƒê·ªãa ƒëi·ªÉm"
            rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p ƒë·ªãa ƒëi·ªÉm' }]}
          >
            <Input placeholder="Nh·∫≠p ƒë·ªãa ƒëi·ªÉm t·ªï ch·ª©c" />
          </Form.Item>

          <Form.Item
            name="moTa"
            label="M√¥ t·∫£"
            rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p m√¥ t·∫£' }]}
          >
            <TextArea
              rows={4}
              placeholder="Nh·∫≠p m√¥ t·∫£ chi ti·∫øt v·ªÅ ho·∫°t ƒë·ªông"
            />
          </Form.Item>

          <Row gutter={16}>
            <Col span={12}>
              <Form.Item
                name="ngayBatDau"
                label="Ng√†y b·∫Øt ƒë·∫ßu"
                rules={[{ required: true, message: 'Vui l√≤ng ch·ªçn ng√†y b·∫Øt ƒë·∫ßu' }]}
              >
                <DatePicker style={{ width: '100%' }} />
              </Form.Item>
            </Col>
            <Col span={12}>
              <Form.Item
                name="ngayKetThuc"
                label="Ng√†y k·∫øt th√∫c"
                rules={[{ required: true, message: 'Vui l√≤ng ch·ªçn ng√†y k·∫øt th√∫c' }]}
              >
                <DatePicker style={{ width: '100%' }} />
              </Form.Item>
            </Col>
          </Row>

          <Form.Item
            name="soLuongNguoiToiDa"
            label="S·ªë l∆∞·ª£ng ng∆∞·ªùi t·ªëi ƒëa"
            rules={[{ required: true, message: 'Vui l√≤ng nh·∫≠p s·ªë l∆∞·ª£ng ng∆∞·ªùi t·ªëi ƒëa' }]}
          >
            <InputNumber
              min={1}
              style={{ width: '100%' }}
              placeholder="Nh·∫≠p s·ªë l∆∞·ª£ng ng∆∞·ªùi t·ªëi ƒëa"
            />
          </Form.Item>

          <Form.Item>
            <Space>
              <Button type="primary" htmlType="submit">
                {editingCampaign ? 'C·∫≠p nh·∫≠t' : 'T·∫°o m·ªõi'}
              </Button>
              <Button onClick={() => setModalVisible(false)}>
                H·ªßy
              </Button>
            </Space>
          </Form.Item>
        </Form>
      </Modal>
    </div>
  );
}
